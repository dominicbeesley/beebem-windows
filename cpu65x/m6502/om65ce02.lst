# license:BSD-3-Clause
# copyright-holders:Olivier Galibert
# 65ce02 opcodes, a lot only remove dummy read/write cycles, some are new, some use the B register

adc_ce_aba
	TMP = read(PC++);
	TMP = set_h(TMP, read(PC++));
	TMP = read(TMP);
	do_adc(TMP);
	if(P & F_D) {
		set_nz(A);
	}
	fetch();

adc_ce_abx
	TMP = read(PC++);
	TMP = set_h(TMP, read(PC++));
	TMP += X;
	TMP = read(TMP);
	do_adc(TMP);
	if(P & F_D) {
		set_nz(A);
	}
	fetch();

adc_ce_aby
	TMP = read(PC++);
	TMP = set_h(TMP, read(PC++));
	TMP += Y;
	TMP = read(TMP);
	do_adc(TMP);
	if(P & F_D) {
		set_nz(A);
	}
	fetch();

adc_ce_idx
	TMP2 = read(PC++);
	TMP2 += X;
	TMP = read(B|TMP2);
	TMP2++;
	TMP = set_h(TMP, read(B|TMP2));
	do_adc(read(TMP));
	if(P & F_D) {
		set_nz(A);
	}
	fetch();

adc_ce_idy
	TMP2 = read(PC++);
	TMP = read(B|TMP2);
	TMP2++;
	TMP = set_h(TMP, read(B|TMP2));
	do_adc(read(TMP+Y));
	if(P & F_D) {
		set_nz(A);
	}
	fetch();

adc_idz
	TMP2 = read(PC++);
	TMP = read(B|TMP2);
	TMP2++;
	TMP = set_h(TMP, read(B|TMP2));
	do_adc(read(TMP+Z));
	if(P & F_D) {
		set_nz(A);
	}
	fetch();

adc_ce_imm
	TMP = read(PC++);
	do_adc(TMP);
	if(P & F_D) {
		set_nz(A);
	}
	fetch();

adc_ce_zpg
	TMP = read(PC++);
	TMP = read(B|TMP);
	do_adc(TMP);
	if(P & F_D) {
		set_nz(A);
	}
	fetch();

adc_ce_zpx
	TMP = read(PC++);
	TMP = read(B|uint8_t(TMP+X));
	do_adc(TMP);
	if(P & F_D) {
		set_nz(A);
	}
	fetch();

and_ce_abx
	TMP = read(PC++);
	TMP = set_h(TMP, read(PC++));
	TMP += X;
	A &= read(TMP);
	set_nz(A);
	fetch();

and_ce_aby
	TMP = read(PC++);
	TMP = set_h(TMP, read(PC++));
	TMP += Y;
	A &= read(TMP);
	set_nz(A);
	fetch();

and_ce_idx
	TMP2 = read(PC++);
	TMP2 += X;
	TMP = read(B|TMP2);
	TMP2++;
	TMP = set_h(TMP, read(B|TMP2));
	A &= read(TMP);
	set_nz(A);
	fetch();

and_ce_idy
	TMP2 = read(PC++);
	TMP = read(B|TMP2);
	TMP2++;
	TMP = set_h(TMP, read(B|TMP2));
	A &= read(TMP+Y);
	set_nz(A);
	fetch();

and_idz
	TMP2 = read(PC++);
	TMP = read(B|TMP2);
	TMP2++;
	TMP = set_h(TMP, read(B|TMP2));
	A &= read(TMP+Z);
	set_nz(A);
	fetch();

and_ce_zpg
	TMP = read(PC++);
	A &= read(B|TMP);
	set_nz(A);
	fetch();

and_ce_zpx
	TMP = read(PC++);
	A &= read(B|uint8_t(TMP+X));
	set_nz(A);
	fetch();

asl_ce_aba
	TMP = read(PC++);
	TMP = set_h(TMP, read(PC++));
	TMP2 = read(TMP);
	TMP2 = do_asl(TMP2);
	write(TMP, TMP2);
	fetch();

asl_ce_abx
	TMP = read(PC++);
	TMP = set_h(TMP, read(PC++));
	TMP += X;
	TMP2 = read(TMP);
	TMP2 = do_asl(TMP2);
	write(TMP, TMP2);
	fetch();

asl_ce_acc
	A = do_asl(A);
	fetch();

asl_ce_zpg
	TMP = B|read(PC++);
	TMP2 = read(TMP);
	TMP2 = do_asl(TMP2);
	write(TMP, TMP2);
	fetch();

asl_ce_zpx
	TMP = read(PC++);
	TMP = B|uint8_t(TMP+X);
	TMP2 = read(TMP);
	TMP2 = do_asl(TMP2);
	write(TMP, TMP2);
	fetch();

asr_acc
	A = do_asr(A);
	fetch();

asr_zpg
	TMP = B|read(PC++);
	TMP2 = read(TMP);
	TMP2 = do_asr(TMP2);
	write(TMP, TMP2);
	fetch();

asr_zpx
	TMP = read(PC++);
	TMP = B|uint8_t(TMP+X);
	TMP2 = read(TMP);
	TMP2 = do_asr(TMP2);
	write(TMP, TMP2);
	fetch();

asw_aba
	TMP = read(PC++);
	TMP = set_h(TMP, read(PC++));
	TMP3 = read(TMP);
	TMP3 = set_h(TMP3, read(TMP+1));
	P &= ~(F_C|F_N|F_Z);
	if(TMP3 & 0x8000) {
		P |= F_C;
	}
	TMP3 <<= 1;
	if(!TMP3) {
		P |= F_Z;
	} else {
		if(TMP3 & 0x8000) {
			P |= F_N;
		}
	}
	write(TMP, TMP3);
	write(TMP, TMP3 >> 8);
	fetch();

aug_iw3
	read(PC++);
	read(PC++);
	read(PC++);
	fetch();

bbr_ce_zpb
	// Access pattern uncertain
	TMP = read(PC++);
	TMP2 = read(TMP);
	TMP = read(PC++);
	if(!(TMP2 & (1 << ((IR >> 4) & 7)))) {
		PC += int8_t(TMP);
	}
	fetch();

bbs_ce_zpb
	// Access pattern uncertain
	TMP = read(PC++);
	TMP2 = read(TMP);
	TMP = read(PC++);
	if(TMP2 & (1 << ((IR >> 4) & 7))) {
		PC += int8_t(TMP);
	}
	fetch();

bcc_ce_rel
	TMP = read(PC++);
	if(!(P & F_C)) {
		PC += int8_t(TMP);
	}
	fetch();

bcc_rw2
	TMP = read(PC++);
	TMP = set_h(TMP, read(PC++));
	if(!(P & F_C)) {
		PC += TMP-1;
	}
	fetch();

bcs_ce_rel
	TMP = read(PC++);
	if(P & F_C) {
		PC += int8_t(TMP);
	}
	fetch();

bcs_rw2
	TMP = read(PC++);
	TMP = set_h(TMP, read(PC++));
	if(P & F_C) {
		PC += TMP-1;
	}
	fetch();

beq_ce_rel
	TMP = read(PC++);
	if(P & F_Z) {
		PC += int8_t(TMP);
	}
	fetch();

beq_rw2
	TMP = read(PC++);
	TMP = set_h(TMP, read(PC++));
	if(P & F_Z) {
		PC += TMP-1;
	}
	fetch();

bit_ce_abx
	TMP = read(PC++);
	TMP = set_h(TMP, read(PC++));
	TMP += X;
	do_bit(read(TMP));
	fetch();

bit_ce_imm
	TMP = read(PC++);
	do_bit(TMP);
	fetch();

bit_ce_zpg
	TMP = B|read(PC++);
	do_bit(read(TMP));
	fetch();

bit_ce_zpx
	TMP = read(PC++);
	TMP = read(B|uint8_t(TMP+X));
	do_bit(TMP);
	fetch();

bmi_ce_rel
	TMP = read(PC++);
	if(P & F_N) {
		PC += int8_t(TMP);
	}
	fetch();

bmi_rw2
	TMP = read(PC++);
	TMP = set_h(TMP, read(PC++));
	if(P & F_N) {
		PC += TMP-1;
	}
	fetch();

bne_ce_rel
	TMP = read(PC++);
	if(!(P & F_Z)) {
		PC += int8_t(TMP);
	}
	fetch();

bne_rw2
	TMP = read(PC++);
	TMP = set_h(TMP, read(PC++));
	if(!(P & F_Z)) {
		PC += TMP-1;
	}
	fetch();

bpl_ce_rel
	TMP = read(PC++);
	if(!(P & F_N)) {
		PC += int8_t(TMP);
	}
	fetch();

bpl_rw2
	TMP = read(PC++);
	TMP = set_h(TMP, read(PC++));
	if(!(P & F_N)) {
		PC += TMP-1;
	}
	fetch();

bra_ce_rel
	TMP = read(PC++);
	PC += int8_t(TMP);
	fetch();

bra_rw2
	TMP = read(PC++);
	TMP = set_h(TMP, read(PC++));
	PC += TMP - 1;
	fetch();

brk_ce_imp
	if(irq_taken) {
		read(PC);
	} else {
		read(PC++);
	}
	write(SP, PC >> 8);
	dec_SP_ce();
	write(SP, PC);
	dec_SP_ce();
	write(SP, irq_taken || nmi_state ? P & ~F_B : P);
	dec_SP_ce();
	if(nmi_state) {
		PC = read(0xfffa);
		PC = set_h(PC, read(0xfffb));
		nmi_state = false;
	} else {
		PC = read(0xfffe);
		PC = set_h(PC, read(0xffff));
	}
	irq_taken = false;
	P = (P | F_I) & ~F_D; // Do *not* move after the fetch
	fetch();

bsr_rw2
	TMP = read(PC++);
	write(SP, PC>>8);
	dec_SP_ce();
	write(SP, PC);
	dec_SP_ce();
	TMP = set_h(TMP, read(PC++));
	PC += TMP-1;
	fetch();

bvc_ce_rel
	TMP = read(PC++);
	if(!(P & F_V)) {
		PC += int8_t(TMP);
	}
	fetch();

bvc_rw2
	TMP = read(PC++);
	TMP = set_h(TMP, read(PC++));
	if(!(P & F_V)) {
		PC += TMP-1;
	}
	fetch();

bvs_ce_rel
	TMP = read(PC++);
	if(P & F_V) {
		PC += int8_t(TMP);
	}
	fetch();

bvs_rw2
	TMP = read(PC++);
	TMP = set_h(TMP, read(PC++));
	if(P & F_V) {
		PC += TMP-1;
	}
	fetch();

clc_ce_imp
	P &= ~F_C;
	fetch();

cld_ce_imp
	P &= ~F_D;
	fetch();

cle_imp
	read(PC);
	P &= ~F_E;
	logerror("CLE\n");
	fetch();

cli_ce_imp
	prefetch();
	P &= ~F_I; // Do *not* move it before the fetch
	postfetch();

clv_ce_imp
	P &= ~F_V;
	fetch();

cmp_ce_abx
	TMP = read(PC++);
	TMP = set_h(TMP, read(PC++));
	TMP += X;
	TMP = read(TMP);
	do_cmp(A, TMP);
	fetch();

cmp_ce_aby
	TMP = read(PC++);
	TMP = set_h(TMP, read(PC++));
	TMP += Y;
	TMP = read(TMP);
	do_cmp(A, TMP);
	fetch();

cmp_ce_idx
	TMP2 = read(PC++);
	TMP2 += X;
	TMP = read(B|TMP2);
	TMP2++;
	TMP = set_h(TMP, read(B|TMP2));
	do_cmp(A, read(TMP));
	fetch();

cmp_ce_idy
	TMP2 = read(PC++);
	TMP = read(B|TMP2);
	TMP2++;
	TMP = set_h(TMP, read(B|TMP2));
	do_cmp(A, read(TMP+Y));
	fetch();

cmp_idz
	TMP2 = read(PC++);
	TMP = read(B|TMP2);
	TMP2++;
	TMP = set_h(TMP, read(B|TMP2));
	do_cmp(A, read(TMP+Z));
	fetch();

cmp_ce_zpg
	TMP = read(PC++);
	TMP = read(B|TMP);
	do_cmp(A, TMP);
	fetch();

cmp_ce_zpx
	TMP = read(PC++);
	read(TMP);
	TMP = read(B|uint8_t(TMP+X));
	do_cmp(A, TMP);
	fetch();

cpx_ce_zpg
	TMP = read(PC++);
	TMP = read(B|TMP);
	do_cmp(X, TMP);
	fetch();

cpy_ce_zpg
	TMP = read(PC++);
	TMP = read(B|TMP);
	do_cmp(Y, TMP);
	fetch();

cpz_aba
	TMP = read(PC++);
	TMP = set_h(TMP, read(PC++));
	TMP = read(TMP);
	do_cmp(Z, TMP);
	fetch();

cpz_imm
	TMP = read(PC++);
	do_cmp(Z, TMP);
	fetch();

cpz_zpg
	TMP = read(PC++);
	TMP = read(B|TMP);
	do_cmp(Z, TMP);
	fetch();

dec_ce_aba
	TMP = read(PC++);
	TMP = set_h(TMP, read(PC++));
	TMP2 = read(TMP);
	TMP2--;
	set_nz(TMP2);
	write(TMP, TMP2);
	fetch();

dec_ce_abx
	TMP = read(PC++);
	TMP = set_h(TMP, read(PC++));
	TMP += X;
	TMP2 = read(TMP);
	TMP2--;
	set_nz(TMP2);
	write(TMP, TMP2);
	fetch();

dec_ce_acc
	A--;
	set_nz(A);
	fetch();

dec_ce_zpg
	TMP = B|read(PC++);
	TMP2 = read(TMP);
	TMP2--;
	set_nz(TMP2);
	write(TMP, TMP2);
	fetch();

dec_ce_zpx
	TMP = read(PC++);
	TMP = B|uint8_t(TMP+X);
	TMP2 = read(TMP);
	TMP2--;
	set_nz(TMP2);
	write(TMP, TMP2);
	fetch();

dew_zpg
	TMP2 = read(PC++);
	TMP = read(B|TMP2);
	TMP2++;
	TMP = set_h(TMP, read(B|TMP2));
	P &= ~(F_N|F_Z);
	TMP++;
	if(!TMP) {
		P |= F_Z;
	} else {
		if(TMP & 0x8000) {
			P |= F_N;
		}
	}
	TMP2++;
	write(B|TMP2, TMP);
	TMP2++;
	write(B|TMP2, TMP >> 8);
	fetch();

dex_ce_imp
	X--;
	set_nz(X);
	fetch();

dey_ce_imp
	Y--;
	set_nz(Y);
	fetch();

dez_imp
	Z--;
	set_nz(Z);
	fetch();

eor_ce_abx
	TMP = read(PC++);
	TMP = set_h(TMP, read(PC++));
	TMP += X;
	A ^= read(TMP);
	set_nz(A);
	fetch();

eor_ce_aby
	TMP = read(PC++);
	TMP = set_h(TMP, read(PC++));
	TMP += Y;
	A ^= read(TMP);
	set_nz(A);
	fetch();

eor_ce_idx
	TMP2 = read(PC++);
	TMP2 += X;
	TMP = read(B|TMP2);
	TMP2++;
	TMP = set_h(TMP, read(B|TMP2));
	A ^= read(TMP);
	set_nz(A);
	fetch();

eor_ce_idy
	TMP2 = read(PC++);
	TMP = read(B|TMP2);
	TMP2++;
	TMP = set_h(TMP, read(B|TMP2));
	A ^= read(TMP+Y);
	set_nz(A);
	fetch();

eor_idz
	TMP2 = read(PC++);
	TMP = read(B|TMP2);
	TMP2++;
	TMP = set_h(TMP, read(B|TMP2));
	A ^= read(TMP+Z);
	set_nz(A);
	fetch();

eor_ce_zpg
	TMP = read(PC++);
	A ^= read(B|TMP);
	set_nz(A);
	fetch();

eor_ce_zpx
	TMP = read(PC++);
	A ^= read(B|uint8_t(TMP+X));
	set_nz(A);
	fetch();

inc_ce_aba
	TMP = read(PC++);
	TMP = set_h(TMP, read(PC++));
	TMP2 = read(TMP);
	TMP2++;
	set_nz(TMP2);
	write(TMP, TMP2);
	fetch();

inc_ce_abx
	TMP = read(PC++);
	TMP = set_h(TMP, read(PC++));
	TMP += X;
	TMP2 = read(TMP);
	TMP2++;
	set_nz(TMP2);
	write(TMP, TMP2);
	fetch();

inc_ce_acc
	A++;
	set_nz(A);
	fetch();

inc_ce_zpg
	TMP = B|read(PC++);
	TMP2 = read(TMP);
	TMP2++;
	set_nz(TMP2);
	write(TMP, TMP2);
	fetch();

inc_ce_zpx
	TMP = read(PC++);
	TMP = B|uint8_t(TMP+X);
	TMP2 = read(TMP);
	TMP2++;
	set_nz(TMP2);
	write(TMP, TMP2);
	fetch();

inw_zpg
	TMP2 = read(PC++);
	TMP = read(B|TMP2);
	TMP2++;
	TMP = set_h(TMP, read(B|TMP2));
	P &= ~(F_N|F_Z);
	TMP++;
	if(!TMP) {
		P |= F_Z;
	} else {
		if(TMP & 0x8000) {
			P |= F_N;
		}
	}
	TMP2--;
	write(B|TMP2, TMP);
	TMP2++;
	write(B|TMP2, TMP >> 8);
	fetch();

inx_ce_imp
	X++;
	set_nz(X);
	fetch();

iny_ce_imp
	Y++;
	set_nz(Y);
	fetch();

inz_imp
	Z++;
	set_nz(Z);
	fetch();

jmp_ce_iax
	TMP = read(PC++);
	TMP = set_h(TMP, read(PC++));
	TMP += X;
	PC = read(TMP);
	PC = set_h(PC, read(TMP+1));
	fetch();

jmp_ce_ind
	TMP = read(PC++);
	TMP = set_h(TMP, read(PC++));
	PC = read(TMP);
	PC = set_h(PC, read(TMP+1));
	fetch();

jsr_ce_adr
	TMP = read(PC++);
	write(SP, PC>>8);
	dec_SP_ce();
	write(SP, PC);
	dec_SP_ce();
	TMP = set_h(TMP, read(PC++));
	PC = TMP;
	fetch();

jsr_iax
	TMP = read(PC++);
	write(SP, PC>>8);
	dec_SP_ce();
	write(SP, PC);
	dec_SP_ce();
	TMP = set_h(TMP, read(PC++));
	PC = read(TMP);
	PC = set_h(PC, read(TMP+1));
	PC += X;
	fetch();

jsr_ind
	TMP = read(PC++);
	write(SP, PC>>8);
	dec_SP_ce();
	write(SP, PC);
	dec_SP_ce();
	TMP = set_h(TMP, read(PC++));
	PC = read(TMP);
	PC = set_h(PC, read(TMP+1));
	fetch();

lda_ce_abx
	TMP = read(PC++);
	TMP = set_h(TMP, read(PC++));
	A = read(TMP + X);
	set_nz(A);
	fetch();

lda_ce_aby
	TMP = read(PC++);
	TMP = set_h(TMP, read(PC++));
	A = read(TMP + Y);
	set_nz(A);
	fetch();

lda_ce_idx
	TMP2 = read(PC++);
	TMP2 += X;
	TMP = read(B|TMP2);
	TMP2++;
	TMP = set_h(TMP, read(B|TMP2));
	A = read(TMP);
	set_nz(A);
	fetch();

lda_ce_idy
	TMP2 = read(PC++);
	TMP = read(B|TMP2);
	TMP2++;
	TMP = set_h(TMP, read(B|TMP2));
	A = read(TMP+Y);
	set_nz(A);
	fetch();

lda_idz
	TMP2 = read(PC++);
	TMP = read(B|TMP2);
	TMP2++;
	TMP = set_h(TMP, read(B|TMP2));
	A = read(TMP+Z);
	set_nz(A);
	fetch();

lda_isy
	read(PC);
	TMP = read(PC++);
	if(P & F_E) {
		TMP = set_l(SP, SP+TMP);
	} else {
		TMP = SP + TMP;
	}
	TMP2 = read(TMP);
	TMP++;
	TMP = TMP2 | (read(TMP) << 8);
	A = read(TMP+Y);
	set_nz(A);
	fetch();

lda_ce_zpg
	TMP = read(PC++);
	A = read(B|TMP);
	set_nz(A);
	fetch();

lda_ce_zpx
	TMP = read(PC++);
	A = read(B|uint8_t(TMP+X));
	set_nz(A);
	fetch();

ldx_ce_aby
	TMP = read(PC++);
	TMP = set_h(TMP, read(PC++));
	X = read(TMP + Y);
	set_nz(X);
	fetch();

ldx_ce_zpg
	TMP = read(PC++);
	X = read(B|TMP);
	set_nz(X);
	fetch();

ldx_ce_zpy
	TMP = read(PC++);
	X = read(B|uint8_t(TMP+Y));
	set_nz(X);
	fetch();

ldy_ce_abx
	TMP = read(PC++);
	TMP = set_h(TMP, read(PC++));
	TMP += X;
	Y = read(TMP);
	set_nz(Y);
	fetch();

ldy_ce_zpg
	TMP = read(PC++);
	Y = read(B|TMP);
	set_nz(Y);
	fetch();

ldy_ce_zpx
	TMP = read(PC++);
	Y = read(B|uint8_t(TMP+X));
	set_nz(Y);
	fetch();

ldz_aba
	TMP = read(PC++);
	TMP = set_h(TMP, read(PC++));
	Z = read(TMP);
	set_nz(Z);
	fetch();

ldz_abx
	TMP = read(PC++);
	TMP = set_h(TMP, read(PC++));
	Z = read(TMP + X);
	set_nz(Z);
	fetch();

ldz_imm
	Z = read(PC++);
	set_nz(Z);
	fetch();

lsr_ce_aba
	TMP = read(PC++);
	TMP = set_h(TMP, read(PC++));
	TMP2 = read(TMP);
	TMP2 = do_lsr(TMP2);
	write(TMP, TMP2);
	fetch();

lsr_ce_abx
	TMP = read(PC++);
	TMP = set_h(TMP, read(PC++));
	read(set_l(TMP, TMP+X));
	TMP += X;
	TMP2 = read(TMP);
	TMP2 = do_lsr(TMP2);
	write(TMP, TMP2);
	fetch();

lsr_ce_acc
	A = do_lsr(A);
	fetch();

lsr_ce_zpg
	TMP = B|read(PC++);
	TMP2 = read(TMP);
	TMP2 = do_lsr(TMP2);
	write(TMP, TMP2);
	fetch();

lsr_ce_zpx
	TMP = read(PC++);
	TMP = B|uint8_t(TMP+X);
	TMP2 = read(TMP);
	TMP2 = do_lsr(TMP2);
	write(TMP, TMP2);
	fetch();

neg_acc
	read(PC);
	A = -A;
	set_nz(A);
	fetch();

ora_ce_abx
	TMP = read(PC++);
	TMP = set_h(TMP, read(PC++));
	TMP += X;
	A |= read(TMP);
	set_nz(A);
	fetch();

ora_ce_aby
	TMP = read(PC++);
	TMP = set_h(TMP, read(PC++));
	TMP += Y;
	A |= read(TMP);
	set_nz(A);
	fetch();

ora_ce_idx
	TMP2 = read(PC++);
	TMP2 += X;
	TMP = read(B|TMP2);
	TMP2++;
	TMP = set_h(TMP, read(B|TMP2));
	A |= read(TMP);
	set_nz(A);
	fetch();

ora_ce_idy
	TMP2 = read(PC++);
	TMP = read(B|TMP2);
	TMP2++;
	TMP = set_h(TMP, read(B|TMP2));
	A |= read(TMP+Y);
	set_nz(A);
	fetch();

ora_idz
	TMP2 = read(PC++);
	TMP = read(B|TMP2);
	TMP2++;
	TMP = set_h(TMP, read(B|TMP2));
	A |= read(TMP+Z);
	set_nz(A);
	fetch();

ora_ce_zpg
	TMP = read(PC++);
	A |= read(B|TMP);
	set_nz(A);
	fetch();

ora_ce_zpx
	TMP = read(PC++);
	A |= read(B|uint8_t(TMP+X));
	set_nz(A);
	fetch();

#  push/pop instructions and rti/rtn/rts are not fully streamlined
pha_ce_imp
	read(PC);
	write(SP, A);
	dec_SP_ce();
	fetch();

php_ce_imp
	read(PC);
	write(SP, P);
	dec_SP_ce();
	fetch();

phw_aba
	TMP = read(PC++);
	TMP = set_h(TMP, read(PC++));
	TMP3 = read(TMP);
	TMP3 = set_h(TMP3, read(TMP+1));
	dec_SP_ce();
	write(SP, TMP3);
	dec_SP_ce();
	write(SP, TMP3 >> 8);
	fetch();

phw_iw2
	TMP = read(PC++);
	TMP = set_h(TMP, read(PC++));
	dec_SP_ce();
	write(SP, TMP);
	dec_SP_ce();
	write(SP, TMP >> 8);
	fetch();

phx_ce_imp
	read(PC);
	write(SP, X);
	dec_SP_ce();
	fetch();

phy_ce_imp
	read(PC);
	write(SP, Y);
	dec_SP_ce();
	fetch();

phz_imp
	read(PC);
	write(SP, Z);
	dec_SP_ce();
	fetch();

pla_ce_imp
	read(PC);
	inc_SP_ce();
	A = read(SP);
	set_nz(A);
	fetch();

plp_ce_imp
	read(PC);
	inc_SP_ce();
	TMP = read(SP) | F_B;
	prefetch();
	P = TMP; // Do *not* move it before the fetch
	postfetch();

plx_ce_imp
	read(PC);
	inc_SP_ce();
	X = read(SP);
	set_nz(X);
	fetch();

ply_ce_imp
	read(PC);
	inc_SP_ce();
	Y = read(SP);
	set_nz(Y);
	fetch();

plz_imp
	read(PC);
	inc_SP_ce();
	Z = read(SP);
	set_nz(Z);
	fetch();

rmb_ce_bzp
	TMP = read(PC++);
	TMP2 = read(TMP);
	TMP2 &= ~(1 << ((IR >> 4) & 7));
	write(TMP, TMP2);
	fetch();

rol_ce_aba
	TMP = read(PC++);
	TMP = set_h(TMP, read(PC++));
	TMP2 = read(TMP);
	TMP2 = do_rol(TMP2);
	write(TMP, TMP2);
	fetch();

rol_ce_abx
	TMP = read(PC++);
	TMP = set_h(TMP, read(PC++));
	TMP += X;
	TMP2 = read(TMP);
	TMP2 = do_rol(TMP2);
	write(TMP, TMP2);
	fetch();

rol_ce_acc
	A = do_rol(A);
	fetch();

rol_ce_zpg
	TMP = B|read(PC++);
	TMP2 = read(TMP);
	TMP2 = do_rol(TMP2);
	write(TMP, TMP2);
	fetch();

rol_ce_zpx
	TMP = read(PC++);
	TMP = B|uint8_t(TMP+X);
	TMP2 = read(TMP);
	TMP2 = do_rol(TMP2);
	write(TMP, TMP2);
	fetch();

ror_ce_aba
	TMP = read(PC++);
	TMP = set_h(TMP, read(PC++));
	TMP2 = read(TMP);
	TMP2 = do_ror(TMP2);
	write(TMP, TMP2);
	fetch();

ror_ce_abx
	TMP = read(PC++);
	TMP = set_h(TMP, read(PC++));
	TMP += X;
	TMP2 = read(TMP);
	TMP2 = do_ror(TMP2);
	write(TMP, TMP2);
	fetch();

ror_ce_acc
	A = do_ror(A);
	fetch();

ror_ce_zpg
	TMP = B|read(PC++);
	TMP2 = read(TMP);
	TMP2 = do_ror(TMP2);
	write(TMP, TMP2);
	fetch();

ror_ce_zpx
	TMP = read(PC++);
	TMP = B|uint8_t(TMP+X);
	TMP2 = read(TMP);
	TMP2 = do_ror(TMP2);
	write(TMP, TMP2);
	fetch();

row_aba
	TMP = read(PC++);
	TMP = set_h(TMP, read(PC++));
	TMP3 = read(TMP);
	TMP3 = set_h(TMP3, read(TMP+1));
	TMP2 = P;
	P &= ~(F_C|F_N|F_Z);
	if(TMP3 & 0x8000) {
		P |= F_C;
	}
	TMP3 <<= 1;
	if(TMP2 & F_C) {
		TMP3 |= 0x0001;
	}
	if(!TMP3) {
		P |= F_Z;
	} else {
		if(TMP3 & 0x8000) {
			P |= F_N;
		}
	}
	write(TMP, TMP3);
	write(TMP, TMP3 >> 8);
	fetch();

rti_ce_imp
	read(PC);
	inc_SP_ce();
	P = read(SP) | F_B;
	inc_SP_ce();
	PC = read(SP);
	inc_SP_ce();
	PC = set_h(PC, read(SP));
	fetch();

rtn_imm
	TMP = read(PC++);
	if(P & F_E) {
		SP = set_l(SP, SP+TMP);
	} else {
		SP += TMP;
	}
	read(PC);
	read(SP);
	inc_SP();
	PC = read(SP);
	inc_SP();
	PC = set_h(PC, read(SP));
	read(PC++);
	fetch();

rts_ce_imp
	inc_SP_ce();
	PC = read(SP);
	inc_SP_ce();
	PC = set_h(PC, read(SP));
	read(PC++);
	fetch();

sbc_ce_aba
	TMP = read(PC++);
	TMP = set_h(TMP, read(PC++));
	TMP = read(TMP);
	do_sbc(TMP);
	if(P & F_D) {
		set_nz(A);
	}
	fetch();

sbc_ce_abx
	TMP = read(PC++);
	TMP = set_h(TMP, read(PC++));
	TMP += X;
	TMP = read(TMP);
	do_sbc(TMP);
	if(P & F_D) {
		set_nz(A);
	}
	fetch();

sbc_ce_aby
	TMP = read(PC++);
	TMP = set_h(TMP, read(PC++));
	TMP += Y;
	TMP = read(TMP);
	do_sbc(TMP);
	if(P & F_D) {
		set_nz(A);
	}
	fetch();

sbc_ce_idx
	TMP2 = read(PC++);
	TMP2 += X;
	TMP = read(B|TMP2);
	TMP2++;
	TMP = set_h(TMP, read(B|TMP2));
	do_sbc(read(TMP));
	if(P & F_D) {
		set_nz(A);
	}
	fetch();

sbc_ce_idy
	TMP2 = read(PC++);
	TMP = read(B|TMP2);
	TMP2++;
	TMP = set_h(TMP, read(B|TMP2));
	do_sbc(read(TMP+Y));
	if(P & F_D) {
		set_nz(A);
	}
	fetch();

sbc_idz
	TMP2 = read(PC++);
	TMP = read(B|TMP2);
	TMP2++;
	TMP = set_h(TMP, read(B|TMP2));
	do_sbc(read(TMP+Z));
	if(P & F_D) {
		set_nz(A);
	}
	fetch();

sbc_ce_imm
	TMP = read(PC++);
	do_sbc(TMP);
	if(P & F_D) {
		set_nz(A);
	}
	fetch();

sbc_ce_zpg
	TMP = read(PC++);
	TMP = read(B|TMP);
	do_sbc(TMP);
	if(P & F_D) {
		set_nz(A);
	}
	fetch();

sbc_ce_zpx
	TMP = read(PC++);
	read(TMP);
	TMP = read(B|uint8_t(TMP+X));
	do_sbc(TMP);
	if(P & F_D) {
		set_nz(A);
	}
	fetch();

sec_ce_imp
	P |= F_C;
	fetch();

sed_ce_imp
	P |= F_D;
	fetch();

see_imp
	read(PC);
	P |= F_E;
	fetch();

sei_ce_imp
	prefetch();
	P |= F_I; // Do *not* move it before the fetch
	postfetch();

smb_ce_bzp
	TMP = read(PC++);
	TMP2 = read(TMP);
	TMP2 |= 1 << ((IR >> 4) & 7);
	write(TMP, TMP2);
	fetch();

sta_ce_abx
	TMP = read(PC++);
	TMP = set_h(TMP, read(PC++));
	write(TMP+X, A);
	fetch();

sta_ce_aby
	TMP = read(PC++);
	TMP = set_h(TMP, read(PC++));
	write(TMP+Y, A);
	fetch();

sta_ce_idx
	TMP2 = read(PC++);
	TMP2 += X;
	TMP = read(B|TMP2);
	TMP2++;
	TMP = set_h(TMP, read(B|TMP2));
	write(TMP, A);
	fetch();

sta_ce_idy
	TMP2 = read(PC++);
	TMP = read(B|TMP2);
	TMP2++;
	TMP = set_h(TMP, read(B|TMP2));
	write(TMP+Y, A);
	fetch();

sta_idz
	TMP2 = read(PC++);
	TMP = read(B|TMP2);
	TMP2++;
	TMP = set_h(TMP, read(B|TMP2));
	write(TMP+Z, A);
	fetch();

sta_isy
	read(PC);
	TMP = read(PC++);
	if(P & F_E) {
		TMP = set_l(SP, SP+TMP);
	} else {
		TMP = SP + TMP;
	}
	TMP2 = read(TMP);
	TMP++;
	TMP = TMP2 | (read(TMP) << 8);
	write(TMP+Y, A);
	fetch();

sta_ce_zpg
	TMP = read(PC++);
	write(B|TMP, A);
	fetch();

sta_ce_zpx
	TMP = read(PC++);
	write(B|uint8_t(TMP+X), A);
	fetch();

stx_aby
	TMP = read(PC++);
	TMP = set_h(TMP, read(PC++));
	write(TMP+Y, X);
	fetch();

stx_ce_zpg
	TMP = read(PC++);
	write(B|TMP, X);
	fetch();

stx_ce_zpy
	TMP = read(PC++);
	write(B|uint8_t(TMP+Y), X);
	fetch();

sty_abx
	TMP = read(PC++);
	TMP = set_h(TMP, read(PC++));
	write(TMP+X, Y);
	fetch();

sty_ce_zpg
	TMP = read(PC++);
	write(B|TMP, Y);
	fetch();

sty_ce_zpx
	TMP = read(PC++);
	write(B|uint8_t(TMP+X), Y);
	fetch();

stz_ce_aba
	TMP = read(PC++);
	TMP = set_h(TMP, read(PC++));
	write(TMP, A);
	fetch();

stz_ce_abx
	TMP = read(PC++);
	TMP = set_h(TMP, read(PC++));
	write(TMP+X, A);
	fetch();

stz_ce_zpg
	TMP = read(PC++);
	write(B|TMP, Z);
	fetch();

stz_ce_zpx
	TMP = read(PC++);
	write(B|uint8_t(TMP+X), Z);
	fetch();

tab_imp
	B = A << 8;
	fetch();

tax_ce_imp
	X = A;
	set_nz(X);
	fetch();

tay_ce_imp
	Y = A;
	set_nz(Y);
	fetch();

taz_imp
	Z = A;
	set_nz(Z);
	fetch();

tba_imp
	A = B >> 8;
	set_nz(A);
	fetch();

trb_ce_aba
	TMP = read(PC++);
	TMP = set_h(TMP, read(PC++));
	TMP2 = read(TMP);
	if(A & TMP2) {
		P &= ~F_Z;
	} else {
		P |= F_Z;
	}
	TMP2 &= ~A;
	write(TMP, TMP2);
	fetch();

trb_ce_zpg
	TMP = read(PC++);
	TMP2 = read(TMP);
	if(A & TMP2) {
		P &= ~F_Z;
	} else {
		P |= F_Z;
	}
	TMP2 &= ~A;
	write(TMP, TMP2);
	fetch();

tsb_ce_aba
	TMP = read(PC++);
	TMP = set_h(TMP, read(PC++));
	TMP2 = read(TMP);
	if(A & TMP2) {
		P &= ~F_Z;
	} else {
		P |= F_Z;
	}
	TMP2 |= A;
	write(TMP, TMP2);
	fetch();

tsb_ce_zpg
	TMP = read(PC++);
	TMP2 = read(TMP);
	if(A & TMP2) {
		P &= ~F_Z;
	} else {
		P |= F_Z;
	}
	TMP2 |= A;
	write(TMP, TMP2);
	fetch();

tsx_ce_imp
	X = SP;
	set_nz(X);
	fetch();

tsy_imp
	Y = SP >> 8;
	set_nz(Y);
	fetch();

txa_ce_imp
	A = X;
	set_nz(A);
	fetch();

txs_ce_imp
	SP = set_l(SP, X);
	fetch_noirq();

tys_imp
	SP = set_h(SP, Y);
	fetch();

tya_ce_imp
	A = Y;
	set_nz(A);
	fetch();

tza_imp
	A = Z;
	set_nz(A);
	fetch();
